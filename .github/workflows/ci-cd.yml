# .github/workflows/ci-cd.yml
name: HealthTrack CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  issues: write
  statuses: write

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false

jobs:
  # Job 1: Pruebas unitarias y análisis de código
  unit-tests:
    name: Unit Tests & Code Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Para SonarQube

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Unit Tests
        run: |
          mvn clean test -B
          echo "Unit tests completed"

      - name: Generate Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Unit Test Results
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: true

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-umbrella

  # Job 2: Pruebas de integración
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: healthtrack_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Integration Tests
        env:
          DATABASE_URL: jdbc:postgresql://localhost:5432/healthtrack_test
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: testpass
        run: |
          mvn verify -P integration-tests -B
          echo "Integration tests completed"

      - name: Generate Integration Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Integration Test Results
          path: target/failsafe-reports/*.xml
          reporter: java-junit

  # Job 3: Pruebas funcionales (E2E)
  functional-tests:
    name: Functional Tests
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Start Application
        run: |
          mvn spring-boot:run -Dspring-boot.run.profiles=test &
          sleep 30
          echo "Application started"

      - name: Wait for Application
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:8081/health; then
              echo "Application is ready"
              break
            fi
            echo "Waiting for application... ($i/30)"
            sleep 2
          done

      - name: Run Functional Tests
        run: |
          mvn test -P functional-tests -B
          echo "Functional tests completed"

      - name: Generate Functional Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Functional Test Results
          path: target/surefire-reports/*.xml
          reporter: java-junit

      - name: Upload Screenshots (on failure)
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: selenium-screenshots
          path: target/screenshots/

  # Job 4: Build y empaquetado
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, functional-tests]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build Application
        run: |
          mvn clean package -DskipTests -B
          echo "Application build completed"

      - name: Build Docker Image
        run: |
          docker build -t healthtrack:${{ github.sha }} .
          docker tag healthtrack:${{ github.sha }} healthtrack:latest
          echo "Docker image built successfully"

      - name: Save Docker Image
        run: |
          docker save healthtrack:${{ github.sha }} > healthtrack-image.tar

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            target/*.jar
            healthtrack-image.tar

  # Job 5: Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 6: Deploy a Staging (solo para main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Load Docker Image
        run: |
          docker load < healthtrack-image.tar

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          docker run -d -p 8081:8081 --name healthtrack-staging healthtrack:${{ github.sha }}
          echo "Deployment to staging completed"

      - name: Run Smoke Tests
        run: |
          sleep 30
          curl -f http://localhost:8081/health || exit 1
          echo "Smoke tests passed"